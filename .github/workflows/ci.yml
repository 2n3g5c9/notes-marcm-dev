name: "CI"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  artifact: ${{ github.event.repository.name }}.tar.zst
  repository_name: ${{ github.event.repository.name }}
  repository_owner: ${{ github.repository_owner }}

jobs:
  init:
    name: Initialisation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code üõé
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache Dependencies üíΩ
        uses: actions/cache@v2.1.7
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install Packages üì¶
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Build Gatsby Site ‚öôÔ∏è
        run: yarn build

      - name: Bundle Artifact üì¶
        run: |
          cd ..
          tar --zstd -cf ${{ env.artifact }} ${{ env.repository_name }}
          mv ${{ env.artifact }} ${{ env.repository_name }}

      - name: Upload Artifact ‚è´
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.repository_name }}
          path: ${{ env.artifact }}

  lint:
    needs: init
    name: Lint checks
    runs-on: ubuntu-latest

    steps:
      - name: Download Artifact ‚è¨
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.repository_name }}

      - name: Extract Artifact üì¶
        run: tar --zstd -xf ${{ env.artifact }}

      - name: Run ESLint Checks ‚úÖ
        working-directory: ${{ env.repository_name }}
        run: yarn lint

  type:
    needs: init
    name: Type checks
    runs-on: ubuntu-latest

    steps:
      - name: Download Artifact ‚è¨
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.repository_name }}

      - name: Extract Artifact üì¶
        run: tar --zstd -xf ${{ env.artifact }}

      - name: Run TypeScript Checks ‚úÖ
        working-directory: ${{ env.repository_name }}
        run: yarn type-check

  snapshot:
    needs: init
    name: Snapshot tests
    runs-on: ubuntu-latest

    steps:
      - name: Download Artifact ‚è¨
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.repository_name }}

      - name: Extract Artifact üì¶
        run: tar --zstd -xf ${{ env.artifact }}

      - name: Run Jest Tests üß™
        working-directory: ${{ env.repository_name }}
        run: yarn test

  accessibility:
    needs: init
    name: Accessibility tests
    runs-on: ubuntu-latest

    steps:
      - name: Download Artifact ‚è¨
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.repository_name }}

      - name: Extract Artifact üì¶
        run: tar --zstd -xf ${{ env.artifact }}

      - name: Reinstall Cypress üì¶
        working-directory: ${{ env.repository_name }}
        run: yarn cy:install

      - name: Run Cypress Tests üß™
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          working-directory: ${{ env.repository_name }}
          start: yarn develop
          wait-on: 'http://localhost:8000'
          wait-on-timeout: 300

  quality:
    needs: init
    name: Code quality checks
    runs-on: ubuntu-latest

    steps:
      - name: Download Artifact ‚è¨
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.repository_name }}

      - name: Extract Artifact üì¶
        run: tar --zstd -xf ${{ env.artifact }}

      - name: Run SonarCloud Scan üì°
        uses: sonarsource/sonarcloud-github-action@v1.6
        with:
          projectBaseDir: ${{ env.repository_name }}
          args: >
            -Dsonar.organization=${{ env.repository_owner }}
            -Dsonar.projectKey=${{ env.repository_owner }}_${{ env.repository_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  lhci:
    needs: init
    name: Lighthouse audit
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact ‚è¨
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.repository_name }}

      - name: Extract Artifact üì¶
        run: tar --zstd -xf ${{ env.artifact }}

      - name: Run Lighthouse CI üóº
        working-directory: ${{ env.repository_name }}
        run: yarn run lhci
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
